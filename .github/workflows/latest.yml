name: Build TensorFlow on Windows with Clang

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    steps:
      # Checkout the TensorFlow repository
      - name: Checkout TensorFlow
        uses: actions/checkout@v4
        with:
          repository: tensorflow/tensorflow
          # ref: v2.10.0  # Optional: specify a version if needed

      # Verify Chocolatey is available
      - name: Verify Chocolatey Installation
        run: choco --version
        shell: cmd

      # Install Clang using Chocolatey
      #- name: Install Clang
      #  run: choco install llvm --version=17.0.6 -y
      #  shell: cmd

      # Set up MSYS2 (optional, for additional tools like patch)
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git patch unzip mingw-w64-x86_64-gcc

      # Set up Python 3.9
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Set up Bazelisk
      - name: Set up Bazelisk
        uses: bazelbuild/setup-bazelisk@v2

      # Install Python dependencies
      - name: Install Python Dependencies
        run: pip install -U six numpy wheel packaging

      # Set environment variables for Python and Clang
      - name: Set Environment Variables
        shell: pwsh
        run: |
          $pythonExe = (Get-Command python).Source
          $sitePackages = python -c "import site; print(site.getsitepackages()[0])"
          echo "PYTHON_BIN_PATH=$pythonExe" >> $env:GITHUB_ENV
          echo "PYTHON_LIB_PATH=$sitePackages" >> $env:GITHUB_ENV
          # Add Clang to PATH
          echo "PATH=C:\Program Files\LLVM\bin;$env:PATH" >> $env:GITHUB_ENV
          # Add MSYS2 to PATH (if needed)
          echo "PATH=C:\msys64\mingw64\bin;$env:PATH" >> $env:GITHUB_ENV

      # Configure TensorFlow to use Clang
      - name: Configure TensorFlow
        shell: pwsh
        run: |
          $answers = @(
            "${env:PYTHON_BIN_PATH}",  # Python binary path
            "${env:PYTHON_LIB_PATH}",  # Python library path
            "N",                       # ROCm support? No
            "N",                       # CUDA support? No
            "Y",                       # Use Clang? Yes
            "",                        # Optimization flags (default)
            "N"                        # Override eigen strong inline? No
          )
          $answers -join "`n" | python configure.py


      # Step 9: Build TensorFlow lite C++
      - name: Build TensorFlow
        run: bazel build //tensorflow/lite:tensorflowlite.dll -c opt
        shell: cmd
        
      # Step 10: Build TensorFlow C
      - name: Build TensorFlow
        run: bazel build //tensorflow/lite/c:tensorflowlite_c.dll -c opt
        shell: cmd

      # Step 11: Zip
      - name: Zip and Upload Artifact
        run: Compress-Archive -Path bazel-bin\* -DestinationPath tflite_dll_c_cpp.zip

      # Step 12: Upload
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tflite lib c and cpp
          path: tflite_dll_c_cpp.zip
