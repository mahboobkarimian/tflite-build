name: Build TensorFlow on Windows

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the TensorFlow repository
      - name: Checkout TensorFlow
        uses: actions/checkout@v4
        with:
          repository: tensorflow/tensorflow

      # Step 2: Verify Chocolatey is available
      - name: Verify Chocolatey Installation
        run: choco --version
        shell: cmd

      # Step 3: Set up MSYS2
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64  # Use 64-bit MinGW environment
          update: true      # Update MSYS2
          install: >        # Install necessary tools
            git
            patch
            unzip
            mingw-w64-x86_64-gcc

      # Step 4: Set up Python 3.9
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Step 5: Set up Bazelisk
      - name: Set up Bazelisk
        uses: bazelbuild/setup-bazelisk@v2

      # Step 6: Install Python dependencies
      - name: Install Python Dependencies
        run: pip install -U six numpy wheel packaging

      # Step 7: Set Python environment variables
      - name: Set Python Paths
        shell: pwsh
        run: |
          $pythonExe = (Get-Command python).Source
          $sitePackages = python -c "import site; print(site.getsitepackages()[0])"
          echo "PYTHON_BIN_PATH=$pythonExe" >> $env:GITHUB_ENV
          echo "PYTHON_LIB_PATH=$sitePackages" >> $env:GITHUB_ENV
          echo "PATH=C:\msys64\mingw64\bin;$env:PATH" >> $env:GITHUB_ENV  # Add MSYS2 to PATH

      # Step 8: Configure TensorFlow
      - name: Configure TensorFlow
        shell: pwsh
        run: |
          $answers = @(
            "${env:PYTHON_BIN_PATH}",  # Q1: Location of Python
            "${env:PYTHON_LIB_PATH}",  # Q2: Python library path
            "N",                       # Q3: ROCm support? No
            "N",                       # Q4: CUDA support? No
            "N",                       # Q5: Use Clang? No (use MSVC)
            "",                        # Q6: Optimization flags (default)
            "N"                        # Q7: Override eigen strong inline? No
          )
          $answers -join "`n" | python configure.py

      # Step 9: Build TensorFlow lite C++
      - name: Build TensorFlow
        run: bazel build //tensorflow/lite:tensorflowlite.dll -c opt
        shell: cmd
        
      # Step 10: Build TensorFlow C
      - name: Build TensorFlow
        run: bazel build //tensorflow/lite/c:tensorflowlite_c.dll -c opt
        shell: cmd

      # Step 11: Zip
      - name: Zip and Upload Artifact
        run: Compress-Archive -Path bazel-bin\* -DestinationPath tflite_dll_c_cpp.zip

      # Step 12: Upload
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tflite lib c and cpp
          path: tflite_dll_c_cpp.zip
